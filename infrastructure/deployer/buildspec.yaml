version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - echo "Installing zip and AWS CLI v2..."
      - apt-get update && apt-get install -y zip unzip awscli

  pre_build:
    commands:
      - echo "Fetching GitLab token from Secrets Manager..."
      - |
        TOKEN_JSON=$(aws secretsmanager get-secret-value --secret-id "${PROJECT_ID}-${ACCOUNT_ID}-GitLabDeployToken" --query SecretString --output text)
        GITLAB_TOKEN_PASSWORD=$(echo "$TOKEN_JSON" | jq -r .token)
        GITLAB_TOKEN_USERNAME=$(echo "$TOKEN_JSON" | jq -r .username)

      - echo "Cloning repo. Branch -> $GIT_BRANCH"
      - git clone -b "$GIT_BRANCH" --single-branch https://github.com/bdelmazoEP/DGPERS_eAssistant.git source
      - cd source
      - export CODE_ROOT=$(pwd)

      - echo "Installing layer dependencies..."
      - mkdir -p build
      - mkdir -p build/layers/base/python
      - pip install -r backend/lambda_layers/base_dependency_layer/requirements.txt -t build/layers/base/python
      - mkdir -p build/layers/custom/python
      - cp -r backend/lambda_layers/custom_modules_layer/* build/layers/custom/python/

  build:
    commands:
      - echo "Zipping Lambda layer artifacts..."
      - cd build/layers/base && zip -r ../../base_layer.zip . && cd $CODE_ROOT
      - cd build/layers/custom && zip -r ../../custom_layer.zip . && cd $CODE_ROOT

      - echo "Zipping Lambda functions..."
      - zip -r build/ask_lambda.zip backend/lambda_functions/aws_answer_question.py 
      - zip -r build/index_lambda.zip backend/lambda_functions/aws_generate_index.py 

      - echo "Zipping frontend assets..."
      - zip -r build/frontend.zip frontend/*

      - echo "Uploading to deploy bucket..."
      - aws s3 cp build/base_layer.zip s3://$DEPLOY_BUCKET/
      - aws s3 cp build/custom_layer.zip s3://$DEPLOY_BUCKET/
      - aws s3 cp build/ask_lambda.zip s3://$DEPLOY_BUCKET/
      - aws s3 cp build/index_lambda.zip s3://$DEPLOY_BUCKET/
      - aws s3 cp build/frontend.zip s3://$DEPLOY_BUCKET/
      # - aws s3 cp config/config.json s3://$DEPLOY_BUCKET/config/config.json || true
      # - aws s3 cp config/rerank_data.csv s3://$DEPLOY_BUCKET/config/rerank_data.csv || true

  post_build:
    commands:
      - echo "Deploying eAssistant stack..."
      - |
        aws cloudformation deploy \
          --stack-name "${PROJECT_ID}-eassistant-stack" \
          --template-file infrastructure/chatbot/application_architecture.yaml \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides ProjectId=${PROJECT_ID} \
          --no-fail-on-empty-changeset \
          --debug

      - echo "Invoking indexing Lambda..."
      - |
        INDEX_LAMBDA_NAME="${PROJECT_ID}-${ACCOUNT_ID}-createindexlambda" 
        aws lambda invoke --function-name "$INDEX_LAMBDA_NAME" response.json
        cat response.json

      - echo "Defining provisioned concurrency for Lambda alias..."
      - |
        aws lambda put-provisioned-concurrency-config \
        --function-name "${PROJECT_ID}-${ACCOUNT_ID}-eassistant" \
        --qualifier live \
        --provisioned-concurrent-executions 3

      - echo "Registering concurrency autoscaling schedule..."
      - |
        LAMBDA_ALIAS="${PROJECT_ID}-${ACCOUNT_ID}-eassistant:live"
        aws application-autoscaling register-scalable-target \
          --service-namespace lambda \
          --resource-id function:${LAMBDA_ALIAS} \
          --scalable-dimension lambda:function:ProvisionedConcurrency \
          --min-capacity 0 \
          --max-capacity 3

        aws application-autoscaling put-scheduled-action \
          --scheduled-action-name "EnableConcurrencyOfficeHours" \
          --service-namespace lambda \
          --resource-id function:${LAMBDA_ALIAS} \
          --scalable-dimension lambda:function:ProvisionedConcurrency \
          --schedule "cron(0 6 ? * MON-FRI *)" \
          --scalable-target-action MinCapacity=3,MaxCapacity=3

        aws application-autoscaling put-scheduled-action \
          --scheduled-action-name "DisableConcurrencyAfterHours" \
          --service-namespace lambda \
          --resource-id function:${LAMBDA_ALIAS} \
          --scalable-dimension lambda:function:ProvisionedConcurrency \
          --schedule "cron(0 16 ? * MON-FRI *)" \
          --scalable-target-action MinCapacity=0,MaxCapacity=0

artifacts:
  files:
    - '**/*'







